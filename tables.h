//*************************************************************************************
//  Arduino synth V4.1
//  Optimized audio driver, modulation engine, envelope engine.
//
//  Dzl/Illutron 2014
//
//*************************************************************************************

/*
 * Height channel sound generator for arduino.
 *
 * enhancements by Pierre-Loup Martin, 2015.
 *
 * It can generate sounds out of waveform, enveloppes and midi pitchs.
 * tables32u4.h contains table to set waveforms, enveloppes, midi pitchs, length and bpm.
 */


#ifndef TABLES_H
#define TABLES_H

// These are the tables used by the Synth to generate sounds.

// waveforms definition. there are 256 values

const char sinTable[] PROGMEM = {
	0,3,6,9,12,16,19,22,25,28,31,34,37,40,43,46,49,51,54,57,60,63,65,68,71,73,76,78,81,83,85,88,90,92,94,96,98,100,102,104,106,107,109,111,112,113,115,116,117,118,120,121,122,122,123,124,125,125,126,126,126,127,127,127,127,127,127,127,126,126,126,125,125,124,123,122,122,121,120,118,117,116,115,113,112,111,109,107,106,104,102,100,98,96,94,92,90,88,85,83,81,78,76,73,71,68,65,63,60,57,54,51,49,46,43,40,37,34,31,28,25,22,19,16,12,9,6,3,0,-3,-6,-9,-12,-16,-19,-22,-25,-28,-31,-34,-37,-40,-43,-46,-49,-51,-54,-57,-60,-63,-65,-68,-71,-73,-76,-78,-81,-83,-85,-88,-90,-92,-94,-96,-98,-100,-102,-104,-106,-107,-109,-111,-112,-113,-115,-116,-117,-118,-120,-121,-122,-122,-123,-124,-125,-125,-126,-126,-126,-127,-127,-127,-127,-127,-127,-127,-126,-126,-126,-125,-125,-124,-123,-122,-122,-121,-120,-118,-117,-116,-115,-113,-112,-111,-109,-107,-106,-104,-102,-100,-98,-96,-94,-92,-90,-88,-85,-83,-81,-78,-76,-73,-71,-68,-65,-63,-60,-57,-54,-51,-49,-46,-43,-40,-37,-34,-31,-28,-25,-22,-19,-16,-12,-9,-6,-3
};// sinusoid wave

const char triTable[] PROGMEM = {
	0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,127,125,123,121,119,117,115,113,111,109,107,105,103,101,99,97,95,93,91,89,87,85,83,81,79,77,75,73,71,69,67,65,63,61,59,57,55,53,51,49,47,45,43,41,39,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1,-1,-3,-5,-7,-9,-11,-13,-15,-17,-19,-21,-23,-25,-27,-29,-31,-33,-35,-37,-39,-41,-43,-45,-47,-49,-51,-53,-55,-57,-59,-61,-63,-65,-67,-69,-71,-73,-75,-77,-79,-81,-83,-85,-87,-89,-91,-93,-95,-97,-99,-101,-103,-105,-107,-109,-111,-113,-115,-117,-119,-121,-123,-125,-127,-128,-126,-124,-122,-120,-118,-116,-114,-112,-110,-108,-106,-104,-102,-100,-98,-96,-94,-92,-90,-88,-86,-84,-82,-80,-78,-76,-74,-72,-70,-68,-66,-64,-62,-60,-58,-56,-54,-52,-50,-48,-46,-44,-42,-40,-38,-36,-34,-32,-30,-28,-26,-24,-22,-20,-18,-16,-14,-12,-10,-8,-6,-4,-2
};// triangle wave

const char squTable[] PROGMEM = {
	
};// square wave

const char sawTable[] PROGMEM = {
	127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128
};// decrescent sawteeth wave

const char noiseTable[] PROGMEM = {
	108,5,-14,-53,85,15,75,-35,85,109,-55,97,-81,73,101,44,-126,72,73,-23,-96,3,72,-69,19,88,-41,19,-69,-2,103,-54,87,-121,-118,95,118,-104,-49,62,-47,-31,15,35,-58,86,15,97,114,14,-92,-81,118,-99,110,-52,73,-98,-77,-32,97,-77,52,5,-7,-99,-94,70,-99,-4,-30,126,-101,3,63,60,126,91,94,-98,55,109,64,-2,99,21,-34,-98,-34,-38,-95,85,-87,-105,-25,-90,-25,103,0,-6,-36,15,-1,59,-14,-89,-57,80,27,84,41,-63,87,-56,-19,-71,-73,-113,-35,-77,-97,-66,-40,103,106,88,78,-86,19,74,69,-115,-125,-83,75,117,-13,-103,34,-119,-80,8,103,60,73,56,103,7,61,54,-33,-69,-117,27,4,-93,106,51,51,-78,17,-61,-40,-113,12,-29,81,94,34,79,90,-68,-31,-51,8,50,-79,-30,86,41,-80,6,65,-80,-127,4,-9,31,17,73,125,9,-82,-62,112,25,-57,-39,127,56,123,-66,82,-96,-38,-98,-122,13,37,-86,-70,-92,-45,87,114,82,77,96,-124,-18,-92,-83,85,5,-120,107,-34,-22,98,-121,-33,-17,-49,-105,25,59,55,-106,-105,-28,-117,73,-86,-104,57,99,-35,77,63,10,-69,-19,-87,-33,95,-68
};// "random" noise


//enveloppes definition. There are 128 values

const unsigned char env1[] PROGMEM = {
	254,254,254,253,253,253,252,252,251,250,249,249,248,247,245,244,243,242,240,239,238,236,234,233,231,229,227,225,223,221,219,217,215,212,210,208,205,203,200,198,195,192,190,187,184,181,178,176,173,170,167,164,161,158,155,152,149,146,143,139,136,133,130,127,124,121,118,115,111,108,105,102,99,96,93,90,87,84,81,78,76,73,70,67,64,62,59,56,54,51,49,46,44,42,39,37,35,33,31,29,27,25,23,21,20,18,16,15,14,12,11,10,9,7,6,5,5,4,3,2,2,1,1,1,0,0,0,0
};// sinus-like decrescent

const unsigned char env2[] PROGMEM = {
	255,242,230,218,207,197,187,178,169,161,153,145,138,131,124,118,112,107,101,96,91,87,82,78,74,71,67,64,61,58,55,52,49,47,45,42,40,38,36,34,33,31,30,28,27,25,24,23,22,21,20,19,18,17,16,15,14,14,13,12,12,11,11,10,10,9,9,8,8,7,7,7,6,6,6,5,5,5,5,4,4,4,4,4,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0
};// progressive

const unsigned char env3[] PROGMEM = {
	255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,253,253,253,253,252,252,252,251,251,250,250,249,249,248,247,247,246,245,245,244,243,242,241,240,239,238,237,236,235,234,233,231,230,229,227,226,225,223,222,220,218,217,215,213,211,209,207,205,203,201,199,197,195,192,190,188,185,183,180,177,175,172,169,166,163,160,157,154,151,148,145,141,138,134,131,127,124,120,116,112,109,105,101,97,92,88,84,79,75,71,66,61,57,52,47,42,37,32,27,22,17,11,6,0,0,0,0,0,0,0,0
};// inverse (slow, then faster and faster

const unsigned char env4[] PROGMEM = {
	1,1,1,2,2,3,4,5,5,6,7,9,10,11,12,14,15,16,18,20,21,23,25,27,29,31,33,35,37,39,42,44,46,49,51,54,56,59,62,64,67,70,73,76,78,81,84,87,90,93,96,99,102,105,108,111,115,118,121,124,127,130,133,136,139,143,146,149,152,155,158,161,164,167,170,173,176,178,181,184,187,190,192,195,198,200,203,205,208,210,212,215,217,219,221,223,225,227,229,231,233,234,236,238,239,240,242,243,244,245,247,248,249,249,250,251,252,252,253,253,253,254,210,165,127,80,35,0
};// sinus-like crescent (reverse sound)

const unsigned char env5[] PROGMEM = {
	6,13,19,25,31,37,44,50,56,62,68,74,80,86,92,98,103,109,115,120,126,131,136,142,147,152,157,162,167,171,176,180,185,189,193,197,201,205,208,212,215,219,222,225,228,231,233,236,238,240,242,244,246,247,249,250,251,252,253,254,254,255,255,255,255,255,254,254,253,252,251,250,249,247,246,244,242,240,238,236,233,231,228,225,222,219,215,212,208,205,201,197,193,189,185,180,176,171,167,162,157,152,147,142,136,131,126,120,115,109,103,98,92,86,80,74,68,62,56,50,44,37,31,25,19,13,6,0
};// cosinus-like (crescent then decrescent, symetrical)

// EFTWS stands for Enveloppe Frequency Tunning Word: it gives the evolving height of the sound during the  play
const unsigned int EFTWS[] PROGMEM = {
	255,252,249,246,243,240,237,234,
	230,227,224,221,218,215,212,209,
	206,203,200,197,194,191,188,185,
	182,179,176,174,171,168,165,162,
	159,156,154,151,148,145,142,140,
	137,134,132,129,126,124,121,118,
	116,113,111,108,106,103,101,98,
	96,93,91,89,86,84,82,80,
	77,75,73,71,69,67,65,63,
	61,59,57,55,53,51,49,47,
	46,44,42,41,39,37,36,34,
	33,31,30,28,27,26,24,23,
	22,20,19,18,17,16,15,14,
	13,12,11,10,9,8,8,7,
	6,6,5,4,4,3,3,2,
	2,2,1,1,1,1,0,0
};

#if(SAMPLING == 22050)
// Definition of the increment values of the tables / sampling frequency. Multiplied by 256 (fixed point math)
// MIDI steps and bpm steps are given for a sampling frequence of 22050Hz (22038.6, exactly)

const unsigned int pitchTable[] PROGMEM = {
	0x0017, 0x0019, 0x001A, 0x001C, 0x001D, 0x001F, 0x0021, 0x0023,
	0x0025, 0x0027, 0x0029, 0x002C, 0x002E, 0x0031, 0x0034, 0x0037,
	0x003A, 0x003E, 0x0042, 0x0045, 0x004A, 0x004E, 0x0053, 0x0058,
	0x005D, 0x0062, 0x0068, 0x006E, 0x0075, 0x007C, 0x0083, 0x008B,
	0x0093, 0x009C, 0x00A5, 0x00AF, 0x00B9, 0x00C5, 0x00D0, 0x00DD,
	0x00EA, 0x00F8, 0x0106, 0x0116, 0x0126, 0x0138, 0x014B, 0x015E,
	0x0173, 0x0189, 0x01A0, 0x01B9, 0x01D3, 0x01EF, 0x020D, 0x022C,
	0x024D, 0x0270, 0x0295, 0x02BC, 0x02E6, 0x0312, 0x0341, 0x0372,
	0x03A7, 0x03DE, 0x0419, 0x0458, 0x049A, 0x04E0, 0x052A, 0x0579,
	0x05CC, 0x0624, 0x0682, 0x06E5, 0x074E, 0x07BD, 0x0833, 0x08AF,
	0x0934, 0x09C0, 0x0A54, 0x0AF1, 0x0B98, 0x0C48, 0x0D03, 0x0DC9,
	0x0E9B, 0x0F7A, 0x1065, 0x115F, 0x1267, 0x137F, 0x14A8, 0x15E2,
	0x1730, 0x1891, 0x1A07, 0x1B93, 0x1D36, 0x1EF3, 0x20CA, 0x22BD,
	0x24CE, 0x26FF, 0x2950, 0x2BC5, 0x2E5F, 0x3121, 0x340D, 0x3725,
	0x3A6D, 0x3DE6, 0x4194, 0x457B, 0x499C, 0x4DFD, 0x52A0, 0x578A,
	0x5CBF, 0x6242, 0x681A, 0x6E4B, 0x74DA, 0x7BCC, 0x8329, 0x8AF6, 
};


// tickBPM is a table that gives the number of ISR cycle to count to have the the corresponding bpm
// This is based on the MIDI tick rate of 24 tick per quarter, for a sampling frequency of 22050Hz
// The possible bmp go from 20 to 240
const unsigned int tickBPM[] PROGMEM = {
	0x0AC3, 0x0A40, 0x09C8, 0x095B, 0x08F8, 0x089C, 0x0847, 0x07F9,
	0x07B0,	0x076C, 0x072D, 0x06F1, 0x06BA, 0x0686, 0x0654, 0x0626,
	0x05FA, 0x05D1,	0x05AA, 0x0585, 0x0561, 0x0540, 0x0520, 0x0501,
	0x04E4, 0x04C8, 0x04AE,	0x0494, 0x047C, 0x0464, 0x044E, 0x0438,
	0x0424, 0x0410, 0x03FC, 0x03EA,	0x03D8, 0x03C7, 0x03B6, 0x03A6,
	0x0396, 0x0387, 0x0379, 0x036B, 0x035D,	0x0350, 0x0343, 0x0336,
	0x032A, 0x031E, 0x0313, 0x0308, 0x02FD, 0x02F3,	0x02E9, 0x02DF,
	0x02D5, 0x02CC, 0x02C2, 0x02B9, 0x02B1, 0x02A8, 0x02A0,	0x0298,
	0x0290, 0x0288, 0x0281, 0x0279, 0x0272, 0x026B, 0x0264, 0x025D,
	0x0257, 0x0250, 0x024A, 0x0244, 0x023E, 0x0238, 0x0232, 0x022D,
	0x0227,	0x0221, 0x021C, 0x0217, 0x0212, 0x020D, 0x0208, 0x0203,
	0x01FE, 0x01F9,	0x01F5, 0x01F0, 0x01EC, 0x01E8, 0x01E3, 0x01DF,
	0x01DB, 0x01D7, 0x01D3,	0x01CF, 0x01CB, 0x01C7, 0x01C4, 0x01C0,
	0x01BC, 0x01B9, 0x01B5, 0x01B2,	0x01AE, 0x01AB, 0x01A8, 0x01A5,
	0x01A1, 0x019E, 0x019B, 0x0198, 0x0195,	0x0192, 0x018F, 0x018C,
	0x018A, 0x0187, 0x0184, 0x0181, 0x017F, 0x017C,	0x0179, 0x0177,
	0x0174, 0x0172, 0x016F, 0x016D, 0x016A, 0x0168, 0x0166,	0x0163,
	0x0161, 0x015F, 0x015D, 0x015B, 0x0158, 0x0156, 0x0154, 0x0152,
	0x0150, 0x014E, 0x014C, 0x014A, 0x0148, 0x0146, 0x0144, 0x0142,
	0x0140, 0x013E, 0x013D, 0x013B, 0x0139, 0x0137, 0x0136, 0x0134,
	0x0132, 0x0130,	0x012F, 0x012D, 0x012B, 0x012A, 0x0128, 0x0127,
	0x0125, 0x0124, 0x0122,	0x0120, 0x011F, 0x011D, 0x011C, 0x011B,
	0x0119, 0x0118, 0x0116, 0x0115,	0x0113, 0x0112, 0x0111, 0x010F,
	0x010E, 0x010D, 0x010B, 0x010A, 0x0109,	0x0108, 0x0106, 0x0105,
	0x0104, 0x0103, 0x0101, 0x0100, 0x00FF, 0x00FE,	0x00FD, 0x00FC,
	0x00FA, 0x00F9, 0x00F8, 0x00F7, 0x00F6, 0x00F5, 0x00F4,	0x00F3,
	0x00F2, 0x00F1, 0x00F0, 0x00EF, 0x00ED, 0x00EC, 0x00EB, 0x00EA,
	0x00E9, 0x00E8, 0x00E7, 0x00E7,
};

#elif (SAMPLING == 20000)

const unsigned int pitchTable[] PROGMEM = {
	0x001A, 0x001B, 0x001D, 0x001E, 0x0020, 0x0022, 0x0024, 0x0026,
	0x0029,	0x002B, 0x002E, 0x0030, 0x0033, 0x0036, 0x0039, 0x003D,
	0x0040, 0x0044, 0x0048, 0x004D, 0x0051, 0x0056, 0x005B, 0x0060,
	0x0066, 0x006C, 0x0073, 0x007A, 0x0081, 0x0088, 0x0091, 0x0099,
	0x00A2, 0x00AC, 0x00B6, 0x00C1, 0x00CC, 0x00D9, 0x00E5, 0x00F3,
	0x0102, 0x0111, 0x0121, 0x0132, 0x0144, 0x0158, 0x016C, 0x0182,
	0x0199, 0x01B1, 0x01CB, 0x01E6, 0x0203, 0x0222, 0x0242, 0x0264,
	0x0289, 0x02B0, 0x02D8, 0x0304, 0x0332, 0x0362, 0x0396, 0x03CC,
	0x0406, 0x0443, 0x0484, 0x04C9, 0x0512, 0x055F, 0x05B1, 0x0607,
	0x0663, 0x06C4, 0x072B, 0x0799, 0x080C, 0x0887, 0x0908, 0x0992,
	0x0A24, 0x0ABE, 0x0B62, 0x0C0F, 0x0CC6, 0x0D89, 0x0E57, 0x0F31,
	0x1018, 0x110D, 0x1211, 0x1324, 0x1447, 0x157C, 0x16C3, 0x181E,
	0x198D, 0x1B12, 0x1CAE, 0x1E62, 0x2031, 0x221B, 0x2422, 0x2648,
	0x288F, 0x2AF8, 0x2D86, 0x303B, 0x3319, 0x3623, 0x395B, 0x3CC4,
	0x4061, 0x4435, 0x4844, 0x4C90, 0x511D, 0x55F0, 0x5B0C, 0x6076,
	0x6633, 0x6C46, 0x72B6, 0x7989, 0x80C3, 0x886B, 0x9087, 0x9920, 
};

const unsigned int tickBPM[] PROGMEM = {
	0x09C4, 0x094D, 0x08E1, 0x087E, 0x0823, 0x07D0, 0x0783, 0x073C,
	0x06FA, 0x06BC, 0x0683, 0x064D, 0x061B, 0x05EB, 0x05BF, 0x0595,
	0x056D, 0x0547, 0x0524, 0x0502, 0x04E2, 0x04C4, 0x04A6, 0x048B,
	0x0470, 0x0457, 0x043F, 0x0428, 0x0412, 0x03FC, 0x03E8, 0x03D4,
	0x03C2, 0x03AF, 0x039E, 0x038D, 0x037D, 0x036D, 0x035E, 0x034F,
	0x0341, 0x0334, 0x0326, 0x031A, 0x030D, 0x0301, 0x02F6, 0x02EA,
	0x02DF, 0x02D5, 0x02CA, 0x02C0, 0x02B6, 0x02AD, 0x02A4, 0x029B,
	0x0292, 0x0289, 0x0281, 0x0279, 0x0271, 0x0269, 0x0262, 0x025A, 
	0x0253, 0x024C, 0x0245, 0x023F, 0x0238, 0x0232, 0x022C, 0x0225,
	0x021F, 0x021A, 0x0214, 0x020E, 0x0209, 0x0203, 0x01FE, 0x01F9,
	0x01F4, 0x01EF, 0x01EA, 0x01E5, 0x01E1, 0x01DC, 0x01D8, 0x01D3,
	0x01CF, 0x01CB, 0x01C7, 0x01C2, 0x01BE, 0x01BA, 0x01B7, 0x01B3,
	0x01AF, 0x01AB, 0x01A8, 0x01A4, 0x01A1, 0x019D, 0x019A, 0x0197,
	0x0193, 0x0190, 0x018D, 0x018A, 0x0187, 0x0184, 0x0181, 0x017E,
	0x017B, 0x0178, 0x0175, 0x0172, 0x0170, 0x016D, 0x016A, 0x0168,
	0x0165, 0x0163, 0x0160, 0x015E, 0x015B, 0x0159, 0x0156, 0x0154,
	0x0152, 0x0150, 0x014D, 0x014B, 0x0149, 0x0147, 0x0145, 0x0143,
	0x0141, 0x013E, 0x013C, 0x013A, 0x0139, 0x0137, 0x0135, 0x0133,
	0x0131, 0x012F, 0x012D, 0x012B, 0x012A, 0x0128, 0x0126, 0x0124,
	0x0123, 0x0121, 0x011F, 0x011E, 0x011C, 0x011A, 0x0119, 0x0117,
	0x0116, 0x0114, 0x0113, 0x0111, 0x0110, 0x010E, 0x010D, 0x010B,
	0x010A, 0x0109, 0x0107, 0x0106, 0x0104, 0x0103, 0x0102, 0x0100,
	0x00FF, 0x00FE, 0x00FD, 0x00FB, 0x00FA, 0x00F9, 0x00F8, 0x00F6,
	0x00F5, 0x00F4, 0x00F3, 0x00F2, 0x00F0, 0x00EF, 0x00EE, 0x00ED,
	0x00EC, 0x00EB, 0x00EA, 0x00E9, 0x00E7, 0x00E6, 0x00E5, 0x00E4,
	0x00E3, 0x00E2, 0x00E1, 0x00E0, 0x00DF, 0x00DE, 0x00DD, 0x00DC,
	0x00DB, 0x00DA, 0x00D9, 0x00D8, 0x00D8, 0x00D7, 0x00D6, 0x00D5,
	0x00D4, 0x00D3, 0x00D2, 0x00D1, 
};

#elif (SAMPLING == 16000)

const unsigned int pitchTable[] PROGMEM = {
	0x0020, 0x0022, 0x0024, 0x0026, 0x0028, 0x002B, 0x002D, 0x0030,
	0x0033, 0x0036, 0x0039, 0x003C, 0x0040, 0x0044, 0x0048, 0x004C,
	0x0050, 0x0055, 0x005A, 0x0060, 0x0065, 0x006B, 0x0072, 0x0079,
	0x0080, 0x0087, 0x008F, 0x0098, 0x00A1, 0x00AB, 0x00B5, 0x00BF,
	0x00CB, 0x00D7, 0x00E4, 0x00F1, 0x00FF, 0x010F, 0x011F, 0x0130,
	0x0142, 0x0155, 0x0169, 0x017F, 0x0196, 0x01AE, 0x01C7, 0x01E2,
	0x01FF, 0x021D, 0x023E, 0x0260, 0x0284, 0x02AA, 0x02D3, 0x02FE,
	0x032B, 0x035B, 0x038E, 0x03C5, 0x03FE, 0x043B, 0x047B, 0x04BF,
	0x0508, 0x0554, 0x05A5, 0x05FB, 0x0656, 0x06B7, 0x071D, 0x0789,
	0x07FC, 0x0875, 0x08F6, 0x097F, 0x0A0F, 0x0AA8, 0x0B4B, 0x0BF6,
	0x0CAD, 0x0D6E, 0x0E3A, 0x0F12, 0x0FF8, 0x10EB, 0x11ED, 0x12FD,
	0x141E, 0x1551, 0x1695, 0x17ED, 0x1959, 0x1ADB, 0x1C74, 0x1E25,
	0x1FF0, 0x21D6, 0x23D9, 0x25FB, 0x283D, 0x2AA1, 0x2D2A, 0x2FDA,
	0x32B2, 0x35B6, 0x38E8, 0x3C4A, 0x3FE0, 0x43AC, 0x47B2, 0x4BF5,
	0x507A, 0x5543, 0x5A55, 0x5FB4, 0x6565, 0x6B6C, 0x71CF, 0x7894,
	0x7FBF, 0x8758, 0x8F64, 0x97EB, 0xA0F3, 0xAA86, 0xB4A9, 0xBF67, 
};

const unsigned int tickBPM[] PROGMEM = {
	0x07D0, 0x0771, 0x071A, 0x06CB, 0x0683, 0x0640, 0x0602, 0x05C9,
	0x0595, 0x0563, 0x0535, 0x050A, 0x04E2, 0x04BC, 0x0498, 0x0477,
	0x0457, 0x0439, 0x041D, 0x0402, 0x03E8, 0x03D0, 0x03B8, 0x03A2,
	0x038D, 0x0379, 0x0366, 0x0353, 0x0341, 0x0330, 0x0320, 0x0310,
	0x0301, 0x02F3, 0x02E5, 0x02D7, 0x02CA, 0x02BE, 0x02B2, 0x02A6,
	0x029B, 0x0290, 0x0285, 0x027B, 0x0271, 0x0267, 0x025E, 0x0255,
	0x024C, 0x0244, 0x023B, 0x0233, 0x022C, 0x0224, 0x021D, 0x0215,
	0x020E, 0x0207, 0x0201, 0x01FA, 0x01F4, 0x01EE, 0x01E8, 0x01E2,
	0x01DC, 0x01D7, 0x01D1, 0x01CC, 0x01C7, 0x01C1, 0x01BC, 0x01B8,
	0x01B3, 0x01AE, 0x01AA, 0x01A5, 0x01A1, 0x019C, 0x0198, 0x0194,
	0x0190, 0x018C, 0x0188, 0x0184, 0x0181, 0x017D, 0x0179, 0x0176, 
	0x0172, 0x016F, 0x016C, 0x0168, 0x0165, 0x0162, 0x015F, 0x015C,
	0x0159, 0x0156, 0x0153, 0x0150, 0x014D, 0x014B, 0x0148, 0x0145,
	0x0143, 0x0140, 0x013D, 0x013B, 0x0139, 0x0136, 0x0134, 0x0131,
	0x012F, 0x012D, 0x012B, 0x0128, 0x0126, 0x0124, 0x0122, 0x0120,
	0x011E, 0x011C, 0x011A, 0x0118, 0x0116, 0x0114, 0x0112, 0x0110,
	0x010E, 0x010C, 0x010B, 0x0109, 0x0107, 0x0105, 0x0104, 0x0102,
	0x0100, 0x00FF, 0x00FD, 0x00FC, 0x00FA, 0x00F8, 0x00F7, 0x00F5,
	0x00F4, 0x00F2, 0x00F1, 0x00F0, 0x00EE, 0x00ED, 0x00EB, 0x00EA,
	0x00E9, 0x00E7, 0x00E6, 0x00E5, 0x00E3, 0x00E2, 0x00E1, 0x00DF,
	0x00DE, 0x00DD, 0x00DC, 0x00DB, 0x00D9, 0x00D8, 0x00D7, 0x00D6,
	0x00D5, 0x00D4, 0x00D3, 0x00D1, 0x00D0, 0x00CF, 0x00CE, 0x00CD,
	0x00CC, 0x00CB, 0x00CA, 0x00C9, 0x00C8, 0x00C7, 0x00C6, 0x00C5, 
	0x00C4, 0x00C3, 0x00C2, 0x00C1, 0x00C0, 0x00BF, 0x00BE, 0x00BE,
	0x00BD, 0x00BC, 0x00BB, 0x00BA, 0x00B9, 0x00B8, 0x00B7, 0x00B7,
	0x00B6, 0x00B5, 0x00B4, 0x00B3, 0x00B3, 0x00B2, 0x00B1, 0x00B0,
	0x00AF, 0x00AF, 0x00AE, 0x00AD, 0x00AC, 0x00AC, 0x00AB, 0x00AA,
	0x00A9, 0x00A9, 0x00A8, 0x00A7, 
};

#elif (SAMPLING == 11025)

const unsigned int pitchTable[] PROGMEM = {
	0x002E, 0x0031, 0x0034, 0x0037, 0x003A, 0x003E, 0x0042, 0x0045,
	0x004A, 0x004E, 0x0053, 0x0057, 0x005D, 0x0062, 0x0068, 0x006E,
	0x0075, 0x007C, 0x0083, 0x008B, 0x0093, 0x009C, 0x00A5, 0x00AF,
	0x00B9, 0x00C4, 0x00D0, 0x00DC, 0x00EA, 0x00F7, 0x0106, 0x0116,
	0x0126, 0x0138, 0x014A, 0x015E, 0x0173, 0x0189, 0x01A0, 0x01B9,
	0x01D3, 0x01EF, 0x020C, 0x022B, 0x024C, 0x026F, 0x0295, 0x02BC,
	0x02E5, 0x0312, 0x0340, 0x0372, 0x03A6, 0x03DE, 0x0419, 0x0457,
	0x0499, 0x04DF, 0x0529, 0x0578, 0x05CB, 0x0623, 0x0680, 0x06E3,
	0x074C, 0x07BB, 0x0831, 0x08AE, 0x0932, 0x09BE, 0x0A52, 0x0AEF,
	0x0B96, 0x0C46, 0x0D01, 0x0DC7, 0x0E99, 0x0F77, 0x1062, 0x115C,
	0x1264, 0x137C, 0x14A4, 0x15DF, 0x172C, 0x188C, 0x1A02, 0x1B8E,
	0x1D31, 0x1EEE, 0x20C4, 0x22B7, 0x24C8, 0x26F8, 0x2949, 0x2BBD,
	0x2E57, 0x3118, 0x3404, 0x371C, 0x3A63, 0x3DDB, 0x4189, 0x456F,
	0x498F, 0x4DEF, 0x5292, 0x577B, 0x5CAE, 0x6231, 0x6808, 0x6E37,
	0x74C5, 0x7BB7, 0x8312, 0x8ADD, 0x931F, 0x9BDF, 0xA523, 0xAEF5,
	0xB95C, 0xC462, 0xD00F, 0xDC6F, 0xE98A, 0xF76D, 0xFFFF, 0xFFFF,
};

const unsigned int tickBPM[] PROGMEM = {
	0x0562, 0x0521, 0x04E5, 0x04AF, 0x047D, 0x044F, 0x0424, 0x03FD,
	0x03D9, 0x03B7, 0x0397, 0x0379, 0x035D, 0x0343, 0x032B, 0x0314,
	0x02FE, 0x02E9, 0x02D5, 0x02C3, 0x02B1, 0x02A0, 0x0290, 0x0281,
	0x0273, 0x0265, 0x0257, 0x024B, 0x023E, 0x0233, 0x0227, 0x021D,
	0x0212, 0x0208, 0x01FF, 0x01F5, 0x01EC, 0x01E4, 0x01DB, 0x01D3,
	0x01CB, 0x01C4, 0x01BD, 0x01B6, 0x01AF, 0x01A8, 0x01A2, 0x019B,
	0x0195, 0x0190, 0x018A, 0x0184, 0x017F, 0x017A, 0x0175, 0x0170,
	0x016B, 0x0166, 0x0161, 0x015D, 0x0159, 0x0154, 0x0150, 0x014C,
	0x0148, 0x0144, 0x0141, 0x013D, 0x0139, 0x0136, 0x0132, 0x012F,
	0x012C, 0x0128, 0x0125, 0x0122, 0x011F, 0x011C, 0x0119, 0x0116,
	0x0114, 0x0111, 0x010E, 0x010C, 0x0109, 0x0107, 0x0104, 0x0102,
	0x00FF, 0x00FD, 0x00FB, 0x00F8, 0x00F6, 0x00F4, 0x00F2, 0x00F0,
	0x00EE, 0x00EC, 0x00EA, 0x00E8, 0x00E6, 0x00E4, 0x00E2, 0x00E0,
	0x00DE, 0x00DD, 0x00DB, 0x00D9, 0x00D7, 0x00D6, 0x00D4, 0x00D2,
	0x00D1, 0x00CF, 0x00CE, 0x00CC, 0x00CB, 0x00C9, 0x00C8, 0x00C6,
	0x00C5, 0x00C4, 0x00C2, 0x00C1, 0x00BF, 0x00BE, 0x00BD, 0x00BC,
	0x00BA, 0x00B9, 0x00B8, 0x00B7, 0x00B5, 0x00B4, 0x00B3, 0x00B2,
	0x00B1, 0x00B0, 0x00AE, 0x00AD, 0x00AC, 0x00AB, 0x00AA, 0x00A9,
	0x00A8, 0x00A7, 0x00A6, 0x00A5, 0x00A4, 0x00A3, 0x00A2, 0x00A1,
	0x00A0, 0x009F, 0x009E, 0x009E, 0x009D, 0x009C, 0x009B, 0x009A,
	0x0099, 0x0098, 0x0097, 0x0097, 0x0096, 0x0095, 0x0094, 0x0093,
	0x0093, 0x0092, 0x0091, 0x0090, 0x0090, 0x008F, 0x008E, 0x008D,
	0x008D, 0x008C, 0x008B, 0x008B, 0x008A, 0x0089, 0x0088, 0x0088,
	0x0087, 0x0086, 0x0086, 0x0085, 0x0085, 0x0084, 0x0083, 0x0083,
	0x0082, 0x0081, 0x0081, 0x0080, 0x0080, 0x007F, 0x007E, 0x007E,
	0x007D, 0x007D, 0x007C, 0x007C, 0x007B, 0x007B, 0x007A, 0x0079,
	0x0079, 0x0078, 0x0078, 0x0077, 0x0077, 0x0076, 0x0076, 0x0075,
	0x0075, 0x0074, 0x0074, 0x0073, 
};


#endif //Sampling tables

#endif