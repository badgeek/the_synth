//*************************************************************************************
//  Arduino synth V4.1
//  Optimized audio driver, modulation engine, envelope engine.
//
//  Dzl/Illutron 2014
//
//*************************************************************************************

/*
 * Height channel sound generator for arduino.
 *
 * enhancements by Pierre-Loup Martin, 2015.
 *
 * It can generate sounds out of waveform, enveloppes and midi pitchs.
 * tables.h contains table to set waveforms, enveloppes, midi pitchs, length and bpm.
 */


#ifndef TABLES_512_H
#define TABLES_512_H

#define TABLE_SIZE			0x1FF
#define TABLE_DIV 			0x7F

// These are the tables used by the Synth to generate sounds.

// waveforms definition. there are 256 values

const char sinTable[] PROGMEM = {
	0, 1, 3, 4, 6, 7, 9, 10, 12, 13, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 102, 103, 104, 105, 106, 107, 108, 108, 109, 110, 111, 112, 112, 113, 114, 114, 115, 116, 116, 117, 117, 118, 119, 119, 120, 120, 121, 121, 121, 122, 122, 123, 123, 123, 124, 124, 124, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 127, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 125, 125, 125, 125, 124, 124, 124, 123, 123, 123, 122, 122, 121, 121, 121, 120, 120, 119, 119, 118, 117, 117, 116, 116, 115, 114, 114, 113, 112, 112, 111, 110, 109, 108, 108, 107, 106, 105, 104, 103, 102, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 91, 90, 89, 88, 87, 86, 85, 84, 82, 81, 80, 79, 78, 76, 75, 74, 73, 71, 70, 69, 67, 66, 65, 63, 62, 61, 59, 58, 57, 55, 54, 52, 51, 50, 48, 47, 45, 44, 42, 41, 39, 38, 36, 35, 33, 32, 30, 29, 27, 26, 24, 23, 21, 20, 18, 17, 15, 13, 12, 10, 9, 7, 6, 4, 3, 1, 0, -2, -4, -5, -7, -8, -10, -11, -13, -14, -16, -18, -19, -21, -22, -24, -25, -27, -28, -30, -31, -33, -34, -36, -37, -39, -40, -42, -43, -45, -46, -48, -49, -51, -52, -53, -55, -56, -58, -59, -60, -62, -63, -64, -66, -67, -68, -70, -71, -72, -74, -75, -76, -77, -79, -80, -81, -82, -83, -85, -86, -87, -88, -89, -90, -91, -92, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -103, -104, -105, -106, -107, -108, -109, -109, -110, -111, -112, -113, -113, -114, -115, -115, -116, -117, -117, -118, -118, -119, -120, -120, -121, -121, -122, -122, -122, -123, -123, -124, -124, -124, -125, -125, -125, -126, -126, -126, -126, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -125, -125, -125, -124, -124, -124, -123, -123, -122, -122, -122, -121, -121, -120, -120, -119, -118, -118, -117, -117, -116, -115, -115, -114, -113, -113, -112, -111, -110, -109, -109, -108, -107, -106, -105, -104, -103, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -92, -91, -90, -89, -88, -87, -86, -85, -83, -82, -81, -80, -79, -77, -76, -75, -74, -72, -71, -70, -68, -67, -66, -64, -63, -62, -60, -59, -58, -56, -55, -53, -52, -51, -49, -48, -46, -45, -43, -42, -40, -39, -37, -36, -34, -33, -31, -30, -28, -27, -25, -24, -22, -21, -19, -18, -16, -14, -13, -11, -10, -8, -7, -5, -4, -2
};// sinusoid wave

const char triTable[] PROGMEM = {
	
};// triangle wave

const char squTable[] PROGMEM = {
	
};// square wave

const char sawTable[] PROGMEM = {
	-128, -128, -127, -127, -126, -126, -125, -125, -124, -124, -123, -123, -122, -122, -121, -121, -120, -120, -119, -119, -118, -118, -117, -117, -116, -116, -115, -115, -114, -114, -113, -113, -112, -112, -111, -111, -110, -110, -109, -109, -108, -108, -107, -107, -106, -106, -105, -105, -104, -104, -103, -103, -102, -102, -101, -101, -100, -100, -99, -99, -98, -98, -97, -97, -96, -96, -95, -95, -94, -94, -93, -93, -92, -92, -91, -91, -90, -90, -89, -89, -88, -88, -87, -87, -86, -86, -85, -85, -84, -84, -83, -83, -82, -82, -81, -81, -80, -80, -79, -79, -78, -78, -77, -77, -76, -76, -75, -75, -74, -74, -73, -73, -72, -72, -71, -71, -70, -70, -69, -69, -68, -68, -67, -67, -66, -66, -65, -65, -64, -64, -63, -63, -62, -62, -61, -61, -60, -60, -59, -59, -58, -58, -57, -57, -56, -56, -55, -55, -54, -54, -53, -53, -52, -52, -51, -51, -50, -50, -49, -49, -48, -48, -47, -47, -46, -46, -45, -45, -44, -44, -43, -43, -42, -42, -41, -41, -40, -40, -39, -39, -38, -38, -37, -37, -36, -36, -35, -35, -34, -34, -33, -33, -32, -32, -31, -31, -30, -30, -29, -29, -28, -28, -27, -27, -26, -26, -25, -25, -24, -24, -23, -23, -22, -22, -21, -21, -20, -20, -19, -19, -18, -18, -17, -17, -16, -16, -15, -15, -14, -14, -13, -13, -12, -12, -11, -11, -10, -10, -9, -9, -8, -8, -7, -7, -6, -6, -5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127
};// decrescent sawteeth wave

const char noiseTable[] PROGMEM = {
	79, 2, 10, 118, 127, -16, 93, 99, -1, -82, -54, 9, 43, 75, -16, 25, 84, 1, -90, -6, 45, 126, 13, 11, 106, 27, -112, -55, -80, 37, 42, 26, 124, -4, 18, -44, 69, -126, -100, -52, 20, 114, -75, 102, 22, 114, -68, -52, 1, 74, 78, 44, 124, 96, 126, 42, -94, -1, -49, 100, 96, -48, -41, 42, 8, -102, -14, 72, -118, -33, 102, -78, -12, -18, 101, 103, -98, -22, -70, 100, 103, -97, -21, 95, -6, 109, -102, -98, 80, 76, -14, -44, 117, -103, -110, 93, 92, 72, 53, -22, -95, -86, 89, 99, 87, -11, -5, -79, 57, 79, -126, -54, -24, -45, 37, 99, 69, -46, 86, 13, 118, -93, 111, -55, -103, 64, -103, 54, -54, 41, -104, 44, 38, 110, -58, 102, -19, 126, 1, 3, 11, 51, -45, 76, 63, 27, -22, 9, -8, -27, -69, 123, 87, 70, 39, -58, 103, 12, -65, -72, -76, 42, 30, -5, -61, 9, -32, -41, -40, 27, 121, -16, -78, -30, -98, 87, 45, -13, -30, 18, -41, 111, 116, -51, 5, -39, -37, 88, -27, -59, 110, -90, 86, 16, 88, 74, 119, -33, -108, -105, 51, 125, 57, -20, 7, -26, -95, -95, 69, 69, 6, -35, -104, -84, 9, -82, -50, 96, -58, 84, 1, 66, -87, 54, -94, -61, -75, 109, 18, -80, -43, -11, 73, 113, -21, 76, 40, 39, 69, -6, -90, 10, 35, -10, 56, 90, 46, -15, -26, -95, -69, 0, -70, 17, 114, 121, -45, -110, -47, -107, 48, -34, 121, 89, -12, -52, 29, -26, -14, 79, 60, -97, 103, 98, 44, 97, -49, -26, 2, -52, -47, -36, 78, 98, -25, 79, 63, 28, -93, 90, -112, 24, -116, 40, 50, -49, 34, -41, -127, -118, 29, -2, 94, 64, -120, 58, 73, 116, -109, -24, 16, 14, 82, 61, 114, -82, 39, 2, 103, 117, -68, 87, 5, -46, 116, -106, -102, 89, -52, -43, -1, 55, 118, -73, -71, -91, -40, -97, 80, -39, -3, 123, 34, 53, -87, -116, 103, 114, 89, 63, 74, 16, 97, -113, 31, 49, -96, -61, -106, -61, -30, 121, -90, 62, 9, -66, -33, -49, 1, 96, -25, -72, 98, -111, -91, -18, 91, -101, -56, 72, -22, -27, 60, -50, -2, 60, 34, -7, 122, 32, -76, -83, 86, -89, -104, 11, -60, 119, 120, -82, -28, -60, -21, 59, -84, -26, -2, 99, 106, -53, -31, 67, 34, 93, -86, -113, 21, -50, -38, 89, -117, 73, -17, -96, -21, 31, 99, 107, -61, 18, 86, 17, 84, -59, -38, 94, -18, -14, -69, 1, -58, 59, -27, 13, -44, -115, -122, -53, 122, -84, -125, 60, -4, 89, 75, -78, 88, -113, 79, 59, -118, -59, 124, -112, -123, 95, -91, 16, -87, -35, 36, -93, 127, 13, -122, -112, 39, 62, 102, -70, 27, 88, 45, 59, 3, -106, -99, -8, -89, -108, -78, 48, 104, -24, 14, 56, -56, -41, -17, -84, -70, -58, -88, -1, 88, 30, 28, 33, -103, 56, 101, 27
};// "random" noise


//enveloppes definition. There are 128 values

const unsigned char env1[] PROGMEM = {
	254,254,254,253,253,253,252,252,251,250,249,249,248,247,245,244,243,242,240,239,238,236,234,233,231,229,227,225,223,221,219,217,215,212,210,208,205,203,200,198,195,192,190,187,184,181,178,176,173,170,167,164,161,158,155,152,149,146,143,139,136,133,130,127,124,121,118,115,111,108,105,102,99,96,93,90,87,84,81,78,76,73,70,67,64,62,59,56,54,51,49,46,44,42,39,37,35,33,31,29,27,25,23,21,20,18,16,15,14,12,11,10,9,7,6,5,5,4,3,2,2,1,1,1,0,0,0,0
};// sinus-like decrescent

const unsigned char env2[] PROGMEM = {
	255,242,230,218,207,197,187,178,169,161,153,145,138,131,124,118,112,107,101,96,91,87,82,78,74,71,67,64,61,58,55,52,49,47,45,42,40,38,36,34,33,31,30,28,27,25,24,23,22,21,20,19,18,17,16,15,14,14,13,12,12,11,11,10,10,9,9,8,8,7,7,7,6,6,6,5,5,5,5,4,4,4,4,4,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0
};// progressive

const unsigned char env3[] PROGMEM = {
	255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,253,253,253,253,252,252,252,251,251,250,250,249,249,248,247,247,246,245,245,244,243,242,241,240,239,238,237,236,235,234,233,231,230,229,227,226,225,223,222,220,218,217,215,213,211,209,207,205,203,201,199,197,195,192,190,188,185,183,180,177,175,172,169,166,163,160,157,154,151,148,145,141,138,134,131,127,124,120,116,112,109,105,101,97,92,88,84,79,75,71,66,61,57,52,47,42,37,32,27,22,17,11,6,0,0,0,0,0,0,0,0
};// inverse (slow, then faster and faster

const unsigned char env4[] PROGMEM = {
	1,1,1,2,2,3,4,5,5,6,7,9,10,11,12,14,15,16,18,20,21,23,25,27,29,31,33,35,37,39,42,44,46,49,51,54,56,59,62,64,67,70,73,76,78,81,84,87,90,93,96,99,102,105,108,111,115,118,121,124,127,130,133,136,139,143,146,149,152,155,158,161,164,167,170,173,176,178,181,184,187,190,192,195,198,200,203,205,208,210,212,215,217,219,221,223,225,227,229,231,233,234,236,238,239,240,242,243,244,245,247,248,249,249,250,251,252,252,253,253,253,254,210,165,127,80,35,0
};// sinus-like crescent (reverse sound)

const unsigned char env5[] PROGMEM = {
	6,13,19,25,31,37,44,50,56,62,68,74,80,86,92,98,103,109,115,120,126,131,136,142,147,152,157,162,167,171,176,180,185,189,193,197,201,205,208,212,215,219,222,225,228,231,233,236,238,240,242,244,246,247,249,250,251,252,253,254,254,255,255,255,255,255,254,254,253,252,251,250,249,247,246,244,242,240,238,236,233,231,228,225,222,219,215,212,208,205,201,197,193,189,185,180,176,171,167,162,157,152,147,142,136,131,126,120,115,109,103,98,92,86,80,74,68,62,56,50,44,37,31,25,19,13,6,0
};// cosinus-like (crescent then decrescent, symetrical)

// EFTWS stands for Enveloppe Frequency Tunning Word: it gives the evolving height of the sound during the  play
const unsigned int EFTWS[] PROGMEM = {
	255,252,249,246,243,240,237,234,
	230,227,224,221,218,215,212,209,
	206,203,200,197,194,191,188,185,
	182,179,176,174,171,168,165,162,
	159,156,154,151,148,145,142,140,
	137,134,132,129,126,124,121,118,
	116,113,111,108,106,103,101,98,
	96,93,91,89,86,84,82,80,
	77,75,73,71,69,67,65,63,
	61,59,57,55,53,51,49,47,
	46,44,42,41,39,37,36,34,
	33,31,30,28,27,26,24,23,
	22,20,19,18,17,16,15,14,
	13,12,11,10,9,8,8,7,
	6,6,5,4,4,3,3,2,
	2,2,1,1,1,1,0,0
};

#if(SAMPLING == 22050)
// Definition of the increment values of the tables / sampling frequency. Multiplied by 256 (fixed point math)
// MIDI steps and bpm steps are given for a sampling frequence of 22050Hz (22038.6, exactly)

const unsigned int pitchTable[] PROGMEM = {
	0x0018, 0x001A, 0x001B, 0x001D, 0x001F, 0x0020, 0x0022, 0x0024,
	0x0027, 0x0029, 0x002B, 0x002E, 0x0031, 0x0034, 0x0037, 0x003A,
	0x003D, 0x0041, 0x0045, 0x0049, 0x004D, 0x0052, 0x0057, 0x005C,
	0x0061, 0x0067, 0x006D, 0x0074, 0x007B, 0x0082, 0x008A, 0x0092,
	0x009A, 0x00A4, 0x00AD, 0x00B8, 0x00C2, 0x00CE, 0x00DA, 0x00E7,
	0x00F5, 0x0104, 0x0113, 0x0123, 0x0135, 0x0147, 0x015B, 0x016F,
	0x0185, 0x019C, 0x01B5, 0x01CF, 0x01EA, 0x0207, 0x0226, 0x0247,
	0x0269, 0x028E, 0x02B5, 0x02DE, 0x030A, 0x0338, 0x0369, 0x039D,
	0x03D4, 0x040E, 0x044C, 0x048E, 0x04D3, 0x051C, 0x056A, 0x05BD,
	0x0614, 0x0671, 0x06D3, 0x073A, 0x07A8, 0x081D, 0x0899, 0x091B,
	0x09A6, 0x0A39, 0x0AD4, 0x0B79, 0x0C28, 0x0CE1, 0x0DA5, 0x0E75,
	0x0F51, 0x103A, 0x1131, 0x1237, 0x134C, 0x1472, 0x15A9, 0x16F3,
	0x1850, 0x19C2, 0x1B4A, 0x1CEA, 0x1EA2, 0x2074, 0x2262, 0x246D,
	0x2698, 0x28E3, 0x2B52, 0x2DE5, 0x30A0, 0x3384, 0x3694, 0x39D3,
	0x3D43, 0x40E8, 0x44C4, 0x48DB, 0x4D30, 0x51C7, 0x56A4, 0x5BCB,
	0x6140, 0x6708, 0x6D29, 0x73A6, 0x7A87, 0x81D0, 0x8988, 0x91B6
};


// tickBPM is a table that gives the number of ISR cycle to count to have the the corresponding bpm
// This is based on the MIDI tick rate of 24 tick per quarter, for a sampling frequency of 22050Hz
// The possible bmp go from 20 to 240
const unsigned int tickBPM[] PROGMEM = {
	0x0AC3, 0x0A40, 0x09C8, 0x095B, 0x08F8, 0x089C, 0x0847, 0x07F9,
	0x07B0,	0x076C, 0x072D, 0x06F1, 0x06BA, 0x0686, 0x0654, 0x0626,
	0x05FA, 0x05D1,	0x05AA, 0x0585, 0x0561, 0x0540, 0x0520, 0x0501,
	0x04E4, 0x04C8, 0x04AE,	0x0494, 0x047C, 0x0464, 0x044E, 0x0438,
	0x0424, 0x0410, 0x03FC, 0x03EA,	0x03D8, 0x03C7, 0x03B6, 0x03A6,
	0x0396, 0x0387, 0x0379, 0x036B, 0x035D,	0x0350, 0x0343, 0x0336,
	0x032A, 0x031E, 0x0313, 0x0308, 0x02FD, 0x02F3,	0x02E9, 0x02DF,
	0x02D5, 0x02CC, 0x02C2, 0x02B9, 0x02B1, 0x02A8, 0x02A0,	0x0298,
	0x0290, 0x0288, 0x0281, 0x0279, 0x0272, 0x026B, 0x0264, 0x025D,
	0x0257, 0x0250, 0x024A, 0x0244, 0x023E, 0x0238, 0x0232, 0x022D,
	0x0227,	0x0221, 0x021C, 0x0217, 0x0212, 0x020D, 0x0208, 0x0203,
	0x01FE, 0x01F9,	0x01F5, 0x01F0, 0x01EC, 0x01E8, 0x01E3, 0x01DF,
	0x01DB, 0x01D7, 0x01D3,	0x01CF, 0x01CB, 0x01C7, 0x01C4, 0x01C0,
	0x01BC, 0x01B9, 0x01B5, 0x01B2,	0x01AE, 0x01AB, 0x01A8, 0x01A5,
	0x01A1, 0x019E, 0x019B, 0x0198, 0x0195,	0x0192, 0x018F, 0x018C,
	0x018A, 0x0187, 0x0184, 0x0181, 0x017F, 0x017C,	0x0179, 0x0177,
	0x0174, 0x0172, 0x016F, 0x016D, 0x016A, 0x0168, 0x0166,	0x0163,
	0x0161, 0x015F, 0x015D, 0x015B, 0x0158, 0x0156, 0x0154, 0x0152,
	0x0150, 0x014E, 0x014C, 0x014A, 0x0148, 0x0146, 0x0144, 0x0142,
	0x0140, 0x013E, 0x013D, 0x013B, 0x0139, 0x0137, 0x0136, 0x0134,
	0x0132, 0x0130,	0x012F, 0x012D, 0x012B, 0x012A, 0x0128, 0x0127,
	0x0125, 0x0124, 0x0122,	0x0120, 0x011F, 0x011D, 0x011C, 0x011B,
	0x0119, 0x0118, 0x0116, 0x0115,	0x0113, 0x0112, 0x0111, 0x010F,
	0x010E, 0x010D, 0x010B, 0x010A, 0x0109,	0x0108, 0x0106, 0x0105,
	0x0104, 0x0103, 0x0101, 0x0100, 0x00FF, 0x00FE,	0x00FD, 0x00FC,
	0x00FA, 0x00F9, 0x00F8, 0x00F7, 0x00F6, 0x00F5, 0x00F4,	0x00F3,
	0x00F2, 0x00F1, 0x00F0, 0x00EF, 0x00ED, 0x00EC, 0x00EB, 0x00EA,
	0x00E9, 0x00E8, 0x00E7, 0x00E7,
};

#elif (SAMPLING == 20000)

const unsigned int pitchTable[] PROGMEM = {
	0x001B, 0x001C, 0x001E, 0x0020, 0x0022, 0x0024, 0x0026, 0x0028,
	0x002B, 0x002D, 0x0030, 0x0033, 0x0036, 0x0039, 0x003C, 0x0040,
	0x0044, 0x0048, 0x004C, 0x0050, 0x0055, 0x005A, 0x005F, 0x0065,
	0x006B, 0x0072, 0x0078, 0x007F, 0x0087, 0x008F, 0x0098, 0x00A1,
	0x00AA, 0x00B4, 0x00BF, 0x00CA, 0x00D6, 0x00E3, 0x00F1, 0x00FF,
	0x010E, 0x011E, 0x012F, 0x0141, 0x0154, 0x0168, 0x017E, 0x0195,
	0x01AD, 0x01C6, 0x01E1, 0x01FE, 0x021C, 0x023C, 0x025E, 0x0282,
	0x02A8, 0x02D1, 0x02FC, 0x0329, 0x0359, 0x038C, 0x03C2, 0x03FC,
	0x0438, 0x0478, 0x04BC, 0x0504, 0x0551, 0x05A2, 0x05F8, 0x0652,
	0x06B3, 0x0719, 0x0785, 0x07F7, 0x0870, 0x08F1, 0x0979, 0x0A09,
	0x0AA2, 0x0B44, 0x0BEF, 0x0CA5, 0x0D65, 0x0E31, 0x0F09, 0x0FEE,
	0x10E0, 0x11E1, 0x12F2, 0x1412, 0x1543, 0x1687, 0x17DE, 0x1949,
	0x1ACA, 0x1C62, 0x1E12, 0x1FDC, 0x21C1, 0x23C3, 0x25E3, 0x2824,
	0x2A87, 0x2D0E, 0x2FBC, 0x3293, 0x3595, 0x38C4, 0x3C24, 0x3FB8,
	0x4382, 0x4786, 0x4BC6, 0x5048, 0x550E, 0x5A1D, 0x5F78, 0x6526,
	0x6B29, 0x7189, 0x7849, 0x7F70, 0x8704, 0x8F0B, 0x978D, 0xA090
};

const unsigned int tickBPM[] PROGMEM = {
	0x09C4, 0x094D, 0x08E1, 0x087E, 0x0823, 0x07D0, 0x0783, 0x073C,
	0x06FA, 0x06BC, 0x0683, 0x064D, 0x061B, 0x05EB, 0x05BF, 0x0595,
	0x056D, 0x0547, 0x0524, 0x0502, 0x04E2, 0x04C4, 0x04A6, 0x048B,
	0x0470, 0x0457, 0x043F, 0x0428, 0x0412, 0x03FC, 0x03E8, 0x03D4,
	0x03C2, 0x03AF, 0x039E, 0x038D, 0x037D, 0x036D, 0x035E, 0x034F,
	0x0341, 0x0334, 0x0326, 0x031A, 0x030D, 0x0301, 0x02F6, 0x02EA,
	0x02DF, 0x02D5, 0x02CA, 0x02C0, 0x02B6, 0x02AD, 0x02A4, 0x029B,
	0x0292, 0x0289, 0x0281, 0x0279, 0x0271, 0x0269, 0x0262, 0x025A, 
	0x0253, 0x024C, 0x0245, 0x023F, 0x0238, 0x0232, 0x022C, 0x0225,
	0x021F, 0x021A, 0x0214, 0x020E, 0x0209, 0x0203, 0x01FE, 0x01F9,
	0x01F4, 0x01EF, 0x01EA, 0x01E5, 0x01E1, 0x01DC, 0x01D8, 0x01D3,
	0x01CF, 0x01CB, 0x01C7, 0x01C2, 0x01BE, 0x01BA, 0x01B7, 0x01B3,
	0x01AF, 0x01AB, 0x01A8, 0x01A4, 0x01A1, 0x019D, 0x019A, 0x0197,
	0x0193, 0x0190, 0x018D, 0x018A, 0x0187, 0x0184, 0x0181, 0x017E,
	0x017B, 0x0178, 0x0175, 0x0172, 0x0170, 0x016D, 0x016A, 0x0168,
	0x0165, 0x0163, 0x0160, 0x015E, 0x015B, 0x0159, 0x0156, 0x0154,
	0x0152, 0x0150, 0x014D, 0x014B, 0x0149, 0x0147, 0x0145, 0x0143,
	0x0141, 0x013E, 0x013C, 0x013A, 0x0139, 0x0137, 0x0135, 0x0133,
	0x0131, 0x012F, 0x012D, 0x012B, 0x012A, 0x0128, 0x0126, 0x0124,
	0x0123, 0x0121, 0x011F, 0x011E, 0x011C, 0x011A, 0x0119, 0x0117,
	0x0116, 0x0114, 0x0113, 0x0111, 0x0110, 0x010E, 0x010D, 0x010B,
	0x010A, 0x0109, 0x0107, 0x0106, 0x0104, 0x0103, 0x0102, 0x0100,
	0x00FF, 0x00FE, 0x00FD, 0x00FB, 0x00FA, 0x00F9, 0x00F8, 0x00F6,
	0x00F5, 0x00F4, 0x00F3, 0x00F2, 0x00F0, 0x00EF, 0x00EE, 0x00ED,
	0x00EC, 0x00EB, 0x00EA, 0x00E9, 0x00E7, 0x00E6, 0x00E5, 0x00E4,
	0x00E3, 0x00E2, 0x00E1, 0x00E0, 0x00DF, 0x00DE, 0x00DD, 0x00DC,
	0x00DB, 0x00DA, 0x00D9, 0x00D8, 0x00D8, 0x00D7, 0x00D6, 0x00D5,
	0x00D4, 0x00D3, 0x00D2, 0x00D1, 
};

#elif (SAMPLING == 16000)

const unsigned int pitchTable[] PROGMEM = {
	0x0021, 0x0023, 0x0026, 0x0028, 0x002A, 0x002D, 0x002F, 0x0032,
	0x0035, 0x0038, 0x003C, 0x003F, 0x0043, 0x0047, 0x004B, 0x0050,
	0x0054, 0x0059, 0x005F, 0x0064, 0x006A, 0x0071, 0x0077, 0x007E,
	0x0086, 0x008E, 0x0096, 0x009F, 0x00A9, 0x00B3, 0x00BD, 0x00C9,
	0x00D5, 0x00E1, 0x00EF, 0x00FD, 0x010C, 0x011C, 0x012D, 0x013F,
	0x0152, 0x0166, 0x017B, 0x0191, 0x01A9, 0x01C3, 0x01DD, 0x01FA,
	0x0218, 0x0238, 0x0259, 0x027D, 0x02A3, 0x02CB, 0x02F6, 0x0323,
	0x0353, 0x0385, 0x03BB, 0x03F3, 0x0430, 0x046F, 0x04B3, 0x04FA,
	0x0546, 0x0596, 0x05EB, 0x0646, 0x06A5, 0x070A, 0x0775, 0x07E7,
	0x085F, 0x08DF, 0x0966, 0x09F5, 0x0A8C, 0x0B2D, 0x0BD7, 0x0C8B,
	0x0D4A, 0x0E14, 0x0EEB, 0x0FCE, 0x10BE, 0x11BD, 0x12CB, 0x13EA,
	0x1519, 0x165A, 0x17AE, 0x1916, 0x1A94, 0x1C29, 0x1DD6, 0x1F9C,
	0x217D, 0x237B, 0x2597, 0x27D3, 0x2A31, 0x2CB4, 0x2F5C, 0x322D,
	0x3529, 0x3852, 0x3BAB, 0x3F38, 0x42FA, 0x46F5, 0x4B2E, 0x4FA6,
	0x5462, 0x5967, 0x5EB8, 0x645A, 0x6A51, 0x70A4, 0x7757, 0x7E6F,
	0x85F4, 0x8DEB, 0x965B, 0x9F4C, 0xA8C5, 0xB2CE, 0xBD70, 0xC8B4
};

const unsigned int tickBPM[] PROGMEM = {
	0x07D0, 0x0771, 0x071A, 0x06CB, 0x0683, 0x0640, 0x0602, 0x05C9,
	0x0595, 0x0563, 0x0535, 0x050A, 0x04E2, 0x04BC, 0x0498, 0x0477,
	0x0457, 0x0439, 0x041D, 0x0402, 0x03E8, 0x03D0, 0x03B8, 0x03A2,
	0x038D, 0x0379, 0x0366, 0x0353, 0x0341, 0x0330, 0x0320, 0x0310,
	0x0301, 0x02F3, 0x02E5, 0x02D7, 0x02CA, 0x02BE, 0x02B2, 0x02A6,
	0x029B, 0x0290, 0x0285, 0x027B, 0x0271, 0x0267, 0x025E, 0x0255,
	0x024C, 0x0244, 0x023B, 0x0233, 0x022C, 0x0224, 0x021D, 0x0215,
	0x020E, 0x0207, 0x0201, 0x01FA, 0x01F4, 0x01EE, 0x01E8, 0x01E2,
	0x01DC, 0x01D7, 0x01D1, 0x01CC, 0x01C7, 0x01C1, 0x01BC, 0x01B8,
	0x01B3, 0x01AE, 0x01AA, 0x01A5, 0x01A1, 0x019C, 0x0198, 0x0194,
	0x0190, 0x018C, 0x0188, 0x0184, 0x0181, 0x017D, 0x0179, 0x0176, 
	0x0172, 0x016F, 0x016C, 0x0168, 0x0165, 0x0162, 0x015F, 0x015C,
	0x0159, 0x0156, 0x0153, 0x0150, 0x014D, 0x014B, 0x0148, 0x0145,
	0x0143, 0x0140, 0x013D, 0x013B, 0x0139, 0x0136, 0x0134, 0x0131,
	0x012F, 0x012D, 0x012B, 0x0128, 0x0126, 0x0124, 0x0122, 0x0120,
	0x011E, 0x011C, 0x011A, 0x0118, 0x0116, 0x0114, 0x0112, 0x0110,
	0x010E, 0x010C, 0x010B, 0x0109, 0x0107, 0x0105, 0x0104, 0x0102,
	0x0100, 0x00FF, 0x00FD, 0x00FC, 0x00FA, 0x00F8, 0x00F7, 0x00F5,
	0x00F4, 0x00F2, 0x00F1, 0x00F0, 0x00EE, 0x00ED, 0x00EB, 0x00EA,
	0x00E9, 0x00E7, 0x00E6, 0x00E5, 0x00E3, 0x00E2, 0x00E1, 0x00DF,
	0x00DE, 0x00DD, 0x00DC, 0x00DB, 0x00D9, 0x00D8, 0x00D7, 0x00D6,
	0x00D5, 0x00D4, 0x00D3, 0x00D1, 0x00D0, 0x00CF, 0x00CE, 0x00CD,
	0x00CC, 0x00CB, 0x00CA, 0x00C9, 0x00C8, 0x00C7, 0x00C6, 0x00C5, 
	0x00C4, 0x00C3, 0x00C2, 0x00C1, 0x00C0, 0x00BF, 0x00BE, 0x00BE,
	0x00BD, 0x00BC, 0x00BB, 0x00BA, 0x00B9, 0x00B8, 0x00B7, 0x00B7,
	0x00B6, 0x00B5, 0x00B4, 0x00B3, 0x00B3, 0x00B2, 0x00B1, 0x00B0,
	0x00AF, 0x00AF, 0x00AE, 0x00AD, 0x00AC, 0x00AC, 0x00AB, 0x00AA,
	0x00A9, 0x00A9, 0x00A8, 0x00A7, 
};

#elif (SAMPLING == 11025)

const unsigned int pitchTable[] PROGMEM = {
	0x0031, 0x0033, 0x0037, 0x003A, 0x003D, 0x0041, 0x0045, 0x0049,
	0x004D, 0x0052, 0x0057, 0x005C, 0x0061, 0x0067, 0x006D, 0x0074,
	0x007A, 0x0082, 0x0089, 0x0092, 0x009A, 0x00A3, 0x00AD, 0x00B7,
	0x00C2, 0x00CE, 0x00DA, 0x00E7, 0x00F5, 0x0103, 0x0113, 0x0123,
	0x0135, 0x0147, 0x015A, 0x016F, 0x0185, 0x019C, 0x01B4, 0x01CE,
	0x01EA, 0x0207, 0x0226, 0x0246, 0x0269, 0x028E, 0x02B5, 0x02DE,
	0x0309, 0x0338, 0x0369, 0x039D, 0x03D4, 0x040E, 0x044B, 0x048D,
	0x04D2, 0x051C, 0x0569, 0x05BC, 0x0613, 0x066F, 0x06D1, 0x0739,
	0x07A7, 0x081C, 0x0897, 0x091A, 0x09A4, 0x0A37, 0x0AD3, 0x0B77,
	0x0C26, 0x0CDF, 0x0DA3, 0x0E72, 0x0F4E, 0x1037, 0x112E, 0x1233,
	0x1349, 0x146E, 0x15A5, 0x16EF, 0x184C, 0x19BE, 0x1B45, 0x1CE4,
	0x1E9C, 0x206E, 0x225C, 0x2467, 0x2691, 0x28DC, 0x2B4A, 0x2DDD,
	0x3097, 0x337B, 0x368B, 0x39C9, 0x3D39, 0x40DD, 0x44B8, 0x48CE,
	0x4D22, 0x51B8, 0x5694, 0x5BBA, 0x612F, 0x66F6, 0x6D15, 0x7392,
	0x7A71, 0x81B9, 0x8970, 0x919C, 0x9A44, 0xA371, 0xAD29, 0xB775,
	0xC25D, 0xCDEC, 0xDA2B, 0xE724, 0xF4E2, 0xFFFF, 0xFFFF, 0xFFFF
};

const unsigned int tickBPM[] PROGMEM = {
	0x0562, 0x0521, 0x04E5, 0x04AF, 0x047D, 0x044F, 0x0424, 0x03FD,
	0x03D9, 0x03B7, 0x0397, 0x0379, 0x035D, 0x0343, 0x032B, 0x0314,
	0x02FE, 0x02E9, 0x02D5, 0x02C3, 0x02B1, 0x02A0, 0x0290, 0x0281,
	0x0273, 0x0265, 0x0257, 0x024B, 0x023E, 0x0233, 0x0227, 0x021D,
	0x0212, 0x0208, 0x01FF, 0x01F5, 0x01EC, 0x01E4, 0x01DB, 0x01D3,
	0x01CB, 0x01C4, 0x01BD, 0x01B6, 0x01AF, 0x01A8, 0x01A2, 0x019B,
	0x0195, 0x0190, 0x018A, 0x0184, 0x017F, 0x017A, 0x0175, 0x0170,
	0x016B, 0x0166, 0x0161, 0x015D, 0x0159, 0x0154, 0x0150, 0x014C,
	0x0148, 0x0144, 0x0141, 0x013D, 0x0139, 0x0136, 0x0132, 0x012F,
	0x012C, 0x0128, 0x0125, 0x0122, 0x011F, 0x011C, 0x0119, 0x0116,
	0x0114, 0x0111, 0x010E, 0x010C, 0x0109, 0x0107, 0x0104, 0x0102,
	0x00FF, 0x00FD, 0x00FB, 0x00F8, 0x00F6, 0x00F4, 0x00F2, 0x00F0,
	0x00EE, 0x00EC, 0x00EA, 0x00E8, 0x00E6, 0x00E4, 0x00E2, 0x00E0,
	0x00DE, 0x00DD, 0x00DB, 0x00D9, 0x00D7, 0x00D6, 0x00D4, 0x00D2,
	0x00D1, 0x00CF, 0x00CE, 0x00CC, 0x00CB, 0x00C9, 0x00C8, 0x00C6,
	0x00C5, 0x00C4, 0x00C2, 0x00C1, 0x00BF, 0x00BE, 0x00BD, 0x00BC,
	0x00BA, 0x00B9, 0x00B8, 0x00B7, 0x00B5, 0x00B4, 0x00B3, 0x00B2,
	0x00B1, 0x00B0, 0x00AE, 0x00AD, 0x00AC, 0x00AB, 0x00AA, 0x00A9,
	0x00A8, 0x00A7, 0x00A6, 0x00A5, 0x00A4, 0x00A3, 0x00A2, 0x00A1,
	0x00A0, 0x009F, 0x009E, 0x009E, 0x009D, 0x009C, 0x009B, 0x009A,
	0x0099, 0x0098, 0x0097, 0x0097, 0x0096, 0x0095, 0x0094, 0x0093,
	0x0093, 0x0092, 0x0091, 0x0090, 0x0090, 0x008F, 0x008E, 0x008D,
	0x008D, 0x008C, 0x008B, 0x008B, 0x008A, 0x0089, 0x0088, 0x0088,
	0x0087, 0x0086, 0x0086, 0x0085, 0x0085, 0x0084, 0x0083, 0x0083,
	0x0082, 0x0081, 0x0081, 0x0080, 0x0080, 0x007F, 0x007E, 0x007E,
	0x007D, 0x007D, 0x007C, 0x007C, 0x007B, 0x007B, 0x007A, 0x0079,
	0x0079, 0x0078, 0x0078, 0x0077, 0x0077, 0x0076, 0x0076, 0x0075,
	0x0075, 0x0074, 0x0074, 0x0073, 
};


#endif //Sampling tables

#endif